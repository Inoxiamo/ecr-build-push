name: Go Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Grant write permissions to the workflow

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64]
        include:
          - goos: linux
            goarch: amd64
            output_name: ebp-linux-amd64
          - goos: windows
            goarch: amd64
            output_name: ebp-windows-amd64.exe
          - goos: darwin
            goarch: amd64
            output_name: ebp-darwin-amd64

    steps:
      # Step 1: Checkout il codice dal repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # Step 3: Costruisci il progetto per ogni combinazione di OS/architettura
      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        run: |
          mkdir -p artifacts  # Crea la cartella artifacts
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o artifacts/${{ matrix.output_name }} ./cmd/dockerops

      # Debug: Verifica che i file siano stati creati correttamente
      - name: List files in artifacts directory (debug)
        run: ls -la artifacts

      # Step 4: Crea la release e carica i binari
      - name: Create Release and Upload Assets
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')  # Esegui solo sui push dei tag
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*  # Carica tutti i file generati nella cartella artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
